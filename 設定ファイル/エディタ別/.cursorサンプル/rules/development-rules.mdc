# 開発・実装ルール

## 🚨 実装開始前の必須確認事項

### チェックリスト（これを飛ばすことは絶対禁止）
1. **このファイル全体を読んだか？** → 読んでいなければ今すぐ読む
2. **作業の種類を特定したか？** → CSS実装、マイグレーション、削除処理など
3. **該当する禁止事項を確認したか？

## タスク分析と計画フェーズ

### 技術制約の把握
- **技術スタックのバージョン確認**：指示に技術スタックの指定がある場合は、その制約内で実装方法を検討
- **バージョン変更の制限**：技術スタックのバージョンは変更せず、どうしても必要な場合のみ自己判断で変更
- **Railsバージョン確認**：はじめに [Gemfile](mdc:Gemfile) を参照して、Railsのバージョンを必ず確認

### 要件・制約の特定
- **システム仕様の理解**：当システムの仕様([spec.md](mdc:.cursor/rules/dev-roules/spec.md))を理解した上で最適な修正を計画
- **重要な要件と制約の特定**
- **潜在的な課題のリストアップ**
- **テーブル構造の理解**：必要に応じて @schema.rb を参照してテーブル構造を理解

### 実装計画の策定
- **タスク実行のための具体的なステップを詳細に列挙**
- **ステップの最適な実行順序を決定**
- **全体考慮**：controller, view, model, service, migrationファイルなど、全て考慮
- **DRY実装**：DRYに実装すること
- **複雑な実装での計画立案**：事前に計画を立て、ユーザーの承認を得てから進める

---

## 設計・アーキテクチャルール

### 完璧主義
- 「大体できた」「ほぼ完了」は許されない。100%完璧に動作するまで作業を続けること

### 設計判断
- **仕様曖昧時の自己決定**：仕様が曖昧な場合、常識的な判断で自己決定して実装を進める
- **論理削除の考慮**：テーブルにdeleted_atやis_activeなど、論理削除系カラムがある場合は、今回の実装で論理削除のtrue/falseをロジックで意識する必要がないか検討

### 重複実装の防止
- **既存の類似機能の有無確認**
- **同名または類似名の関数やコンポーネント確認**
- **重複するAPIエンドポイント確認**
- **共通化可能な処理の特定**

### ディレクトリ・命名規則
- **適切なディレクトリ構造の遵守**
- **命名規則の一貫性維持**
- **共通処理の適切な配置**

### 環境変数の取り扱い
- "ENV["PUBLIC_DOMAIN"] || 'localhost'" のように環境変数のデフォルト値をつけるのは禁止！環境変数がなければエラー扱いにしろ

---

## エラーハンドリング・ログルール

### エラーハンドリング方針
- **log levelはerrorで設定**
- **エラーを握りつぶさない**：必ず呼び出し元に `raise e` する（想定外のエラーはキャッチするな）
- **無意味なキャッチ禁止**：キャッチしてもログを出すだけならキャッチするな
- 想定外エラーはキャッチせずに、一番上までエラーを貫通でthrowしろ

### ログ実装規則
**新規にメソッド追加する際、infoログを埋めて良いのは以下の場面だけ：**
- ループ中に、ループの現在位置をロギングしたい場合
- DBやデータに変更を加える場合(insert, update, deleteなど)
- API実行など外部通信をする際のrequestとresponseのログ
- バッチ処理の開始・終了時
- ログ出力はmodule Loggableを使え

### デバッグルール
**必要に応じて、以下２種類のデバッグを許可：**
- binding.pry
- debugログ（Rails.logger.debug を埋めた後に、そのログを見て解析）

**デバッグ追加のタイミング：**
- 初回のコード実装の時点ではdebugを埋めない
- テスト失敗やバグの解析などで必要になった時点で初めて追加

---

## Rails開発ルール

### コード生成
- **Rails ジェネレータ禁止**：rails g migration, rails g scaffold, rails g model などのコード生成コマンドは使わず、直接コードを生成
- **migration命名規則**：migrationファイルを作成する際は、dateコマンドで本日の日付を確認してから、ファイル名は「本日の日付＋枝番」形式
  - 例：今日が2025/6/15なら、`db/migrate/20250615000001_create_bank_histories.rb`
- **migration実行タイミング**：rails db:migrateは、全てのコード生成を終えた後に実行するよう促す

### バリデーション実装
- **バリデーションはmodelに記述**：ControllerやServiceに書くのは禁止
- **バリデーションエラー表示**：画面に表示すること。他の画面と同様の仕組みで、エラーメッセージを強調表示

### 禁止事項
- rails console, rails c
- git commit, rebase, push, merge
- ssh
- .sendを用いてprivateメソッドにアクセスすること
- **Rails.env.test? の使用** 絶対に禁止!
- DBの値をmodelの定数宣言以外のコードに書くこと（必ずmodelに定数宣言したものを使用）

---

## Docker・コンテナ関連

### コンテナ使用ルール
- **railsコマンドやテストの実行**：app コンテナを使用

---

## 品質管理・問題対応

### 実行・検証プロセス
- **ステップごとの実行**：特定したステップを一つずつ実行
- **進捗報告**：各ステップの完了後、簡潔に進捗を報告
- **迅速な検証**：各タスクの実行結果を迅速に検証

### エラー対応プロセス
**エラーや不整合が発生した場合の対応手順：**
1. 問題の切り分けと原因特定（ログ分析、デバッグ情報の確認）
2. 対策案の作成と実施
3. 修正後の動作検証
4. デバッグログの確認と分析

### 類似問題のチェック
- **エラー修正タスクの場合は、他にも同様の箇所がないか必ずチェック**

---

## コード品質・保守性（コーディングルール）

### CSS・スタイル実装ルール
- **viewファイルに<style>タグの記述は厳格禁止**：CSSやSCSSファイルに記述すること
- **理由**：保守性の向上、スタイルの一元管理、ファイルの役割分担明確化
- **SCSSファイルの場所**：app/assets/stylesheets/に適切なファイル名で配置
- **既存SCSSファイルがある場合**：既存ファイルに追記すること

### コメントに関するルール
- コメントは日本語で書け
- "既存" "新" "xxx版" "xxxは廃止" "xxxを追加" "削除済み" など、今回の変更に関するコンテキストでしか通用しないような言葉をコメントに付与するな。

### フォーマットは最低限に
- 可能な限り差分を出したくないので、今回追加した行以外のコードフォーマットは禁止する

### 定数の利用徹底
- **DB値の定数化必須**：モデルのstateやusage等、DB値として意味を持つ値は、必ずmodelの定数を使用
- **リテラル記述禁止**：サービス・コントローラ・テスト等でリテラルで直接値を記述することを禁止
- **定数追加**：既存の定数がない場合は、modelに定数を追加してから利用

### 削除処理の確実性保証
- **destroy!の必須使用**：削除処理では必ず `destroy!` を使用（`destroy` は削除失敗時でも例外を発生させない）
- **一括削除の方法**：`destroy_all` ではなく `each(&:destroy!)` を使用（個別のバリデーションやコールバックを確実に実行）
- **エラーハンドリング禁止**：削除処理で `destroy!` を使用する場合、例外をキャッチしてログ出力後に `raise e` するだけのエラーハンドリングは不要

**削除処理の正しい実装例：**
```ruby
# 正しい例：エラーハンドリングなし
record.destroy!

# 間違った例：ログ出力だけのエラーハンドリング
begin
  record.destroy!
rescue => e
  logger_error("Failed to delete: #{e.message}")
  raise e  # これは不要
end
```

### モデルインスタンス変数の命名規約
**【必須】モデル名ベースの変数命名：**
- **モデルのインスタンス変数は必ずモデル名を小文字スネークケースにした名前を使用**
- **略語や省略形の使用は禁止**

**具体例：**
- ❌ `urls.each do |url_record|`
- ✅ `corporate_master_urls.each do |corporate_master_url|`

**適用範囲：**
- サービスクラス、コントローラ、ヘルパー、テストコード等、全てのRubyコード
- メソッドの引数名、ローカル変数名も同様に適用

**理由：**
- コードの可読性と保守性を向上させる
- 変数の役割を明確にし、バグを防止する
- チーム開発での統一性を保つ

---

## 最終確認・完了判定

### 成果物評価
- **すべてのタスクが完了したら、成果物全体を評価**
- **影響範囲を調査し、対応もれがないことを確実にチェック**
- **DRY実装の確認**

### ファイル・構造チェック
- **migrationファイル日付確認**：新規作成した際は、ファイル名に本日の日付＋枝番を含んでいるかチェック（本日の日付はdateコマンドで確認）
- **フォーム統合**：new, editアクションを作成した際は、viewは必ず_formにDRYにまとめる

### 整合性確認
- **当初の指示内容との整合性を確認し、必要に応じて調整**
- **実装した機能に重複がないことを最終確認**

### コード整理
- **不要コードの削除**：今回修正した差分の範囲で、使わなくなったclassやメソッドが他で使われているかを確認し、未使用の場合は削除
- **メソッド・クラス削除の確認手順**：
  1. メソッドやクラスの呼び出しをやめる変更を行った場合、それらがテスト以外で使用されているかを`Grep`ツールで確認する
  2. テスト以外で使用されていない場合は、該当のメソッドやクラスを削除する
  3. 削除対象：テストでのみ使用されているメソッド、クラス、関数

### セルフレビュー
- **実装完了後のセルフレビュー必須**

---

## 開発時の重要な注意事項

### 自律性・品質
- **自律実行の徹底**：複雑な変更や重大な影響がある場合でも自律的に判断して実行
- **品質重視の実行**：軽微な仕様の不明点、実装方法の選択、エラー対応などは全て自律的に判断して実行
- **完璧主義の徹底**：「ほぼ完了」「大体動作」「テストが失敗しているが関係ない」などの理由で作業を終了することは絶対に禁止

### 変更制限
- **必要最小限の変更だけ行う**
- **無関係な行の勝手なフォーマット禁止**：改行、デリミタ付与など、今回の要件達成に直接関係のない変更は一切禁止
- **UI/UXデザインの変更は原則禁止**：ただし、機能実装に必要不可欠な場合は自律的に判断して実行
- **技術スタックのバージョン変更は原則禁止**：ただし、致命的な問題解決に必要な場合は自律的に判断して実行

### テストコード実装時の注意
- **プロダクトコード確認必須**：テストコードを実装する際は、プロダクトコードを必ず確認してから、その実態に見合った内容でテストを書く

### ユーザー手間ゼロ化
- **依頼者に可能な限り手間を取らせない**：例えば「もしファイルが存在しなければお手伝いします」のようにファイルの確認を依頼者にさせず、自分がその確認自体も行う

### 継続改善
- **今後の改善**：修正に対してバグなどの不備を指摘された場合、今後繰り返さないために.cursor/rules/global.mdcにどう記載すれば良いかを考え、追記

---

## 📚 専門ルールファイル参照

**以下のケースに当てはまる場合、追加のルールファイルを必ず参照してください：**

### 🧪 テスト関連作業時
```
[testing-rules.mdc](mdc:.cursor/rules/testing-rules.mdc)
```

### 🛠️ migration実装時
```
[development-rules.mdc](mdc:.cursor/rules/development-rules.mdc)
```


### ルールファイルにルールを追加する場合
```
[rule-management.mdc](mdc:.cursor/rules/rule-management.mdc)
```

### 🎯 プロジェクト固有情報(常に参照しろ)
```
[project-context.mdc](mdc:.cursor/rules/project-context.mdc)
```
- システム仕様・技術スタック
- Docker コマンド・特別注意事項
- Employee モデル・日本語UI必須ルール
